{"version":3,"sources":["types/TodoStatus.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoStatus","TodoList","todos","defineSelectedId","selectedTodoId","handleUnSelectTodo","className","map","todo","id","title","completed","classNames","type","onClick","handleSelectTodo","TodoFilter","status","defineStatus","query","getQuery","value","onChange","event","target","All","Active","Completed","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","userId","Loader","TodoModal","selectedTodo","useState","user","setUser","useEffect","getUserFromServer","a","UserFromServer","name","href","App","setTodos","completedStatus","setCompletedStatus","setQuery","setSelectedTodoId","getTodosFromServer","todosFromServer","visibleTodos","prepearedTodos","trim","filter","normalizedTitle","toLowerCase","normalizedQuery","includes","filterTodos","find","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0429f7d4.chunk.js","sourcesContent":["export enum TodoStatus {\n  Active = 'active',\n  Completed = 'completed',\n  All = 'all',\n}\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  defineSelectedId: (a:number) => void;\n  selectedTodoId: number;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  defineSelectedId,\n  selectedTodoId,\n}) => {\n  const handleSelectTodo = (todo:Todo) => defineSelectedId(todo.id);\n  const handleUnSelectTodo = () => defineSelectedId(0);\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => {\n          const {\n            id,\n            title,\n            completed,\n          } = todo;\n\n          return (\n            <tr\n              key={id}\n              data-cy=\"todo\"\n              className={classNames({\n                'has-background-info-light': selectedTodoId,\n              })}\n            >\n              <td className=\"is-vcentered\">{id}</td>\n\n              <td className=\"is-vcentered\">\n                {completed\n                  && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n              </td>\n\n              <td className=\"is-vcentered is-expanded\">\n                <p className={classNames({\n                  'has-text-success': completed,\n                  'has-text-danger': !completed,\n                })}\n                >\n                  {title}\n                </p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                {id === selectedTodoId\n                  ? (\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={handleUnSelectTodo}\n                    >\n                      <span className=\"icon\">\n                        <i className=\"far fa-eye-slash\" />\n                      </span>\n                    </button>\n                  )\n                  : (\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => handleSelectTodo(todo)}\n                    >\n                      <span className=\"icon\">\n                        <i className=\"far fa-eye\" />\n                      </span>\n                    </button>\n                  )}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { TodoStatus } from '../../types/TodoStatus';\n\ntype Props = {\n  status: TodoStatus,\n  defineStatus: (a:TodoStatus) => void,\n  query:string;\n  getQuery:(a:string) => void\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  status,\n  defineStatus,\n  query,\n  getQuery,\n}) => {\n  const handleSelect = (event:React.ChangeEvent<HTMLSelectElement>) => (\n    defineStatus(event.target.value as TodoStatus)\n  );\n\n  const handleInput = (event:React.ChangeEvent<HTMLInputElement>) => (\n    getQuery(event.target.value)\n  );\n\n  const handleReset = () => {\n    getQuery('');\n    defineStatus(TodoStatus.All);\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleSelect}\n          >\n            <option value={TodoStatus.All}>All</option>\n            <option value={TodoStatus.Active}>Active</option>\n            <option value={TodoStatus.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleInput}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleReset}\n            />\n          </span>\n        )}\n\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  defineSelectedId: (a:number) => void,\n  selectedTodo: Todo\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  defineSelectedId,\n  selectedTodo,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const handleCloseButton = () => defineSelectedId(0);\n  const {\n    title,\n    userId,\n    id,\n    completed,\n  } = selectedTodo;\n\n  useEffect(() => {\n    const getUserFromServer = async () => {\n      const UserFromServer = await getUser(userId);\n\n      setUser(UserFromServer);\n    };\n\n    getUserFromServer();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user?.name\n        ? (\n          <Loader />\n        )\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={handleCloseButton}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n\n                {completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong>}\n\n                {' by '}\n\n                <a href=\"mailto:Sincere@april.biz\">\n                  {user?.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { TodoStatus } from './types/TodoStatus';\nimport { FilterTodos } from './types/FilterTodos';\n\nconst filterTodos:FilterTodos = (todos, query, completedStatus) => {\n  let prepearedTodos = [...todos];\n\n  if (query.trim()) {\n    prepearedTodos = prepearedTodos.filter(todo => {\n      const normalizedTitle = todo.title.toLowerCase();\n      const normalizedQuery = query.toLowerCase().trim();\n\n      return normalizedTitle.includes(normalizedQuery);\n    });\n  }\n\n  prepearedTodos = prepearedTodos.filter(todo => {\n    switch (completedStatus) {\n      case TodoStatus.Active:\n        return !todo.completed;\n      case TodoStatus.Completed:\n        return todo.completed;\n      default:\n        return true;\n    }\n  });\n\n  return prepearedTodos;\n};\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [completedStatus, setCompletedStatus] = useState<TodoStatus>(TodoStatus.All);\n  const [query, setQuery] = useState('');\n  const [selectedTodoId, setSelectedTodoId] = useState(0);\n\n  const getTodosFromServer = async () => {\n    const todosFromServer = await getTodos();\n\n    setTodos(todosFromServer);\n  };\n\n  const defineStatus = (value:TodoStatus) => {\n    setCompletedStatus(value);\n  };\n\n  const getQuery = (value:string) => {\n    setQuery(value);\n  };\n\n  const defineSelectedId = (value: number) => {\n    setSelectedTodoId(value);\n  };\n\n  useEffect(() => {\n    getTodosFromServer();\n  }, []);\n\n  const visibleTodos = filterTodos(todos, query, completedStatus);\n  const selectedTodo = todos.find(todo => todo.id === selectedTodoId);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                status={completedStatus}\n                defineStatus={defineStatus}\n                query={query}\n                getQuery={getQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n\n              {todos.length\n                ? (\n                  <TodoList\n                    todos={visibleTodos}\n                    defineSelectedId={defineSelectedId}\n                    selectedTodoId={selectedTodoId}\n                  />\n                )\n                : <Loader />}\n\n            </div>\n          </div>\n        </div>\n      </div>\n      {selectedTodo\n      && (\n        <TodoModal\n          defineSelectedId={defineSelectedId}\n          selectedTodo={selectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}