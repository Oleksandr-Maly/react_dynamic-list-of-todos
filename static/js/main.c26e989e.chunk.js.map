{"version":3,"sources":["types/TodoStatus.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoStatus","TodoList","todos","defineSelectedId","selectedTodoId","className","map","todo","id","title","completed","isSelectedTodo","classNames","type","onClick","handleSelectTodo","TodoFilter","status","defineStatus","query","getQuery","value","onChange","event","target","All","Active","Completed","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","userId","Loader","TodoModal","selectedTodo","useState","user","setUser","userIsLoading","setUserIsLoading","isUserLoadidngError","setIsUserLoadingError","getUserFromServer","a","UserFromServer","useEffect","href","email","name","App","setTodos","todoStatus","setTodoStatus","setQuery","setSelectedTodoId","isLoading","setIsLoading","hasError","setHasError","getTodosFromServer","todosFromServer","visibleTodos","prepearedTodos","trim","normalizedQuery","toLowerCase","filter","includes","filterTodos","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c26e989e.chunk.js","sourcesContent":["export enum TodoStatus {\n  Active = 'active',\n  Completed = 'completed',\n  All = 'all',\n}\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  defineSelectedId: (a:number) => void;\n  selectedTodoId: number;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  defineSelectedId,\n  selectedTodoId,\n}) => {\n  const handleSelectTodo = (id:number) => defineSelectedId(id);\n\n  // const handleUnSelectTodo = () => defineSelectedId(0);\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => {\n          const {\n            id,\n            title,\n            completed,\n          } = todo;\n          const isSelectedTodo = id === selectedTodoId;\n\n          return (\n            <tr\n              key={id}\n              data-cy=\"todo\"\n              className={classNames({\n                'has-background-info-light': selectedTodoId,\n              })}\n            >\n              <td className=\"is-vcentered\">{id}</td>\n\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n\n              <td className=\"is-vcentered is-expanded\">\n                <p className={classNames({\n                  'has-text-success': completed,\n                  'has-text-danger': !completed,\n                })}\n                >\n                  {title}\n                </p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => handleSelectTodo(id)}\n                >\n                  <span className=\"icon\">\n                    <i className={classNames(\n                      'far',\n                      {\n                        'fa-eye-slash': isSelectedTodo,\n                        'fa-eye': !isSelectedTodo,\n                      },\n                    )}\n                    />\n                  </span>\n                </button>\n\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { TodoStatus } from '../../types/TodoStatus';\n\ntype Props = {\n  status: TodoStatus,\n  defineStatus: (a:TodoStatus) => void,\n  query:string;\n  getQuery:(a:string) => void\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  status,\n  defineStatus,\n  query,\n  getQuery,\n}) => {\n  const handleSelect = (event:React.ChangeEvent<HTMLSelectElement>) => (\n    defineStatus(event.target.value as TodoStatus)\n  );\n\n  const handleInput = (event:React.ChangeEvent<HTMLInputElement>) => (\n    getQuery(event.target.value)\n  );\n\n  const handleReset = () => {\n    getQuery('');\n    defineStatus(TodoStatus.All);\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleSelect}\n          >\n            <option value={TodoStatus.All}>All</option>\n            <option value={TodoStatus.Active}>Active</option>\n            <option value={TodoStatus.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleInput}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleReset}\n            />\n          </span>\n        )}\n\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  defineSelectedId: (a:number) => void,\n  selectedTodo: Todo\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  defineSelectedId,\n  selectedTodo,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [userIsLoading, setUserIsLoading] = useState(false);\n  const [isUserLoadidngError, setIsUserLoadingError] = useState(false);\n  const handleCloseButton = () => defineSelectedId(0);\n  const {\n    title,\n    userId,\n    id,\n    completed,\n  } = selectedTodo;\n\n  const getUserFromServer = async () => {\n    setIsUserLoadingError(false);\n    setUserIsLoading(true);\n\n    try {\n      const UserFromServer = await getUser(userId);\n\n      setUser(UserFromServer);\n    } catch (error) {\n      setIsUserLoadingError(true);\n    } finally {\n      setUserIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getUserFromServer();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {userIsLoading\n        ? (\n          <Loader />\n        )\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={handleCloseButton}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {title}\n              </p>\n\n              {!isUserLoadidngError && user\n                ? (\n                  <p className=\"block\" data-cy=\"modal-user\">\n                    {completed\n                      ? <strong className=\"has-text-success\">Done</strong>\n                      : <strong className=\"has-text-danger\">Planned</strong>}\n\n                    {' by '}\n\n                    <a href={`mailto:${user?.email}`}>\n                      {user?.name}\n                    </a>\n                  </p>\n                )\n\n                : (\n                  <p className=\"block has-text-danger\">\n                    Couldn`t load the user\n                  </p>\n                )}\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { TodoStatus } from './types/TodoStatus';\nimport { FilterTodos } from './types/FilterTodos';\n\nconst filterTodos:FilterTodos = (todos, query, todoStatus) => {\n  let prepearedTodos = [...todos];\n\n  if (query.trim()) {\n    const normalizedQuery = query.toLowerCase().trim();\n\n    prepearedTodos = prepearedTodos.filter(todo => {\n      const normalizedTitle = todo.title.toLowerCase();\n\n      return normalizedTitle.includes(normalizedQuery);\n    });\n  }\n\n  prepearedTodos = prepearedTodos.filter(todo => {\n    switch (todoStatus) {\n      case TodoStatus.Active:\n        return !todo.completed;\n\n      case TodoStatus.Completed:\n        return todo.completed;\n\n      case TodoStatus.All:\n      default:\n        return true;\n    }\n  });\n\n  return prepearedTodos;\n};\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [todoStatus, setTodoStatus] = useState<TodoStatus>(TodoStatus.All);\n  const [query, setQuery] = useState('');\n  const [selectedTodoId, setSelectedTodoId] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n\n  const getTodosFromServer = async () => {\n    setIsLoading(true);\n    try {\n      const todosFromServer = await getTodos();\n\n      setTodos(todosFromServer);\n      setHasError(false);\n    } catch {\n      setHasError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const defineStatus = (value:TodoStatus) => {\n    setTodoStatus(value);\n  };\n\n  const getQuery = (value:string) => {\n    setQuery(value);\n  };\n\n  const defineSelectedId = (value: number) => {\n    setSelectedTodoId(value);\n  };\n\n  useEffect(() => {\n    getTodosFromServer();\n  }, []);\n\n  const visibleTodos = filterTodos(todos, query, todoStatus);\n  const selectedTodo = todos.find(todo => todo.id === selectedTodoId);\n\n  return (\n    <div className=\"section\">\n      <div className=\"container\">\n        <div className=\"box\">\n          <h1 className=\"title\">Todos:</h1>\n\n          <div className=\"block\">\n            <TodoFilter\n              status={todoStatus}\n              defineStatus={defineStatus}\n              query={query}\n              getQuery={getQuery}\n            />\n          </div>\n\n          <div className=\"block\">\n            {isLoading\n              ? <Loader />\n              : (\n                <TodoList\n                  todos={visibleTodos}\n                  defineSelectedId={defineSelectedId}\n                  selectedTodoId={selectedTodoId}\n                />\n              )}\n            {hasError && (\n              <p>Couldn`t load todos</p>\n            )}\n          </div>\n\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          defineSelectedId={defineSelectedId}\n          selectedTodo={selectedTodo}\n        />\n      )}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}