{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","setSelectedTodo","selectedTodoId","className","map","todo","id","title","completed","classNames","type","onClick","handleSelectTodo","TodoFilter","status","setStatus","query","setQuery","value","onChange","event","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","userId","Loader","TodoModal","selectedTodo","useState","user","setUser","useEffect","getUserFromServer","a","UserFromServer","undefined","name","href","App","setTodos","completedStatus","setCompletedStatus","getTodosFromServer","todosFromServer","visibleTodos","filter","trim","normalizedTitle","toLowerCase","normalizedQuery","includes","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ffa851b9.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[]\n  setSelectedTodo: (a:Todo | null) => void;\n  selectedTodoId: number;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  setSelectedTodo,\n  selectedTodoId,\n}) => {\n  const handleSelectTodo = (todo:Todo) => setSelectedTodo(todo);\n  const handleUnSelectTodo = () => setSelectedTodo(null);\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => {\n          const {\n            id,\n            title,\n            completed,\n          } = todo;\n\n          return (\n            <tr\n              key={id}\n              data-cy=\"todo\"\n              className={classNames({\n                'has-background-info-light': selectedTodoId,\n              })}\n            >\n              <td className=\"is-vcentered\">{id}</td>\n\n              <td className=\"is-vcentered\">\n                {completed\n                  && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n              </td>\n\n              <td className=\"is-vcentered is-expanded\">\n                <p className={classNames({\n                  'has-text-success': completed,\n                  'has-text-danger': !completed,\n                })}\n                >\n                  {title}\n                </p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                {id === selectedTodoId\n                  ? (\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => handleUnSelectTodo()}\n                    >\n                      <span className=\"icon\">\n                        <i className=\"far fa-eye-slash\" />\n                      </span>\n                    </button>\n                  )\n                  : (\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => handleSelectTodo(todo)}\n                    >\n                      <span className=\"icon\"><i className=\"far fa-eye\" /></span>\n                    </button>\n                  )}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","type Props = {\n  status: string,\n  setStatus: (a:string) => void,\n  query:string;\n  setQuery:(a:string) => void\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  status,\n  setStatus,\n  query,\n  setQuery,\n}) => {\n  const handleSelect = (event:React.ChangeEvent<HTMLSelectElement>) => (\n    setStatus(event.target.value)\n  );\n\n  const handleInput = (event:React.ChangeEvent<HTMLInputElement>) => (\n    setQuery(event.target.value)\n  );\n\n  const handleReset = () => {\n    setQuery('');\n    setStatus('all');\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleSelect}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleInput}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleReset}\n            />\n          </span>\n        )}\n\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  selectedTodo: Todo,\n  setSelectedTodo: (a:Todo | null) => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo,\n  setSelectedTodo,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const handleCloseButton = () => setSelectedTodo(null);\n  const {\n    title,\n    userId,\n    id,\n    completed,\n  } = selectedTodo;\n\n  useEffect(() => {\n    const getUserFromServer = async () => {\n      const UserFromServer = await getUser(userId);\n\n      setUser(UserFromServer);\n    };\n\n    getUserFromServer();\n  }, [selectedTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {user?.name === undefined\n        ? (\n          <Loader />\n        )\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={handleCloseButton}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n\n                {completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong>}\n\n                {' by '}\n\n                <a href=\"mailto:Sincere@april.biz\">\n                  {user?.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [completedStatus, setCompletedStatus] = useState('');\n  const [query, setQuery] = useState('');\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n\n  useEffect(() => {\n    const getTodosFromServer = async () => {\n      const todosFromServer = await getTodos();\n\n      setTodos(todosFromServer);\n    };\n\n    getTodosFromServer();\n  }, []);\n\n  let visibleTodos = [...todos];\n\n  if (completedStatus === 'active') {\n    visibleTodos = todos.filter(todo => !todo.completed);\n  }\n\n  if (completedStatus === 'completed') {\n    visibleTodos = todos.filter(todo => todo.completed);\n  }\n\n  if (query.trim()) {\n    visibleTodos = visibleTodos.filter(todo => {\n      const normalizedTitle = todo.title.toLowerCase();\n      const normalizedQuery = query.toLowerCase().trim();\n\n      return normalizedTitle.includes(normalizedQuery);\n    });\n  }\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                status={completedStatus}\n                setStatus={setCompletedStatus}\n                query={query}\n                setQuery={setQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n\n              {todos.length\n                ? (\n                  <TodoList\n                    todos={visibleTodos}\n                    setSelectedTodo={setSelectedTodo}\n                    selectedTodoId={selectedTodo?.id || 0}\n                  />\n                )\n                : <Loader />}\n\n            </div>\n          </div>\n        </div>\n      </div>\n      {selectedTodo && <TodoModal setSelectedTodo={setSelectedTodo} selectedTodo={selectedTodo} />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}